name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - main
jobs:
  Explore-GitHub-Actions:
    runs-on: [self-hosted]
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: Limpieza de carpeta temporal antes del checkout
        shell: powershell
        run: |
          Write-Host "Limpiando el directorio temporal..."
          Get-ChildItem -Path $env:RUNNER_TEMP -Recurse -Force -ErrorAction SilentlyContinue |
          ForEach-Object {
          try {
            Remove-Item $_.FullName -Recurse -Force -ErrorAction Stop
          } catch {
            Write-Host "No se pudo eliminar: $($_.FullName) - probablemente est√° en uso."
            }
          }
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      
      jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Retry Checkout
        uses: actions/github-script@v7
        id: retry-checkout
        with:
          script: |
            const core = require('@actions/core');
            const exec = require('@actions/exec');

            const maxRetries = 3;
            let attempt = 0;

            while (attempt < maxRetries) {
              attempt++;
              core.info(`Attempt ${attempt} of checkout`);

              try {
                await exec.exec('git', ['clone', '--depth=1', '${{ github.event.repository.clone_url }}', '--branch', '${{ github.head_ref || github.ref_name }}', '.']);  // Or customize arguments here
                core.info('Checkout successful');
                break; // Exit the loop if successful
              } catch (error) {
                core.error(`Checkout failed on attempt ${attempt}: ${error}`);
                if (attempt === maxRetries) {
                  core.setFailed(`Checkout failed after ${maxRetries} attempts: ${error}`);
                  throw error; // Re-throw after the last attempt
                }
                // Wait before retrying (optional)
                await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds
              }
            }

